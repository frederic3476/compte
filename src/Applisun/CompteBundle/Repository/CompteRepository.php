<?php

namespace Applisun\CompteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use ACSEO\Bundle\GraphicBundle\Graphic\Flot\Type\TimeLine; 

/**
 * CompteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompteRepository extends EntityRepository
{
    public function updateSolde(\Applisun\CompteBundle\Entity\Operation $operation, $action)
    {
        $compte = $operation->getCompte();
        if ($action == 'add')
        {
            $newSolde =  ($operation->getTypeOperation()->getIsDebit()?$compte->getSolde()-$operation->getMontant():$compte->getSolde()+$operation->getMontant());
        }
        else if ($action == 'remove')
        {
            $newSolde =  ($operation->getTypeOperation()->getIsDebit()?$compte->getSolde()+$operation->getMontant():$compte->getSolde()-$operation->getMontant());
        }
        $compte->setSolde($newSolde);
        $this->_em->persist($compte);            
        $this->_em->flush(); 
    }
    
    public function getCompteByUserNotType(array $parameters)
    {
        $qb = $this->createQueryBuilder('c')
                ->where('c.user = :userId')
                ->andWhere('c.type != :type')
                ->orderBy('c.type', 'ASC')
                ->setParameters(array('userId' => $parameters['user']->getId(), 'type' => $parameters['type']));
 
        return $qb->getQuery()->getResult();
    }
    
    public function getCompteByUserNotCompteId(array $parameters)
    {
        $qb = $this->createQueryBuilder('c')
                ->where('c.user = :userId')
                ->andWhere('c.id != :id')
                ->orderBy('c.type', 'ASC')
                ->setParameters(array('userId' => $parameters['user']->getId(), 'id' => $parameters['id']));
 
        return $qb;
    }
    
    public function prepareDataForPlot(\Applisun\CompteBundle\Entity\Compte $compte)
    {
        
    }
}
